// 그래프란 정점(node)과 정점 사이를 연결하는 간선(edge)으로 이루어진 비선형 자료구조.
// 정점 집합과 간선 집합으로 표현할 수 있다.

// 예시로 인물관계도, 지하철 노선도, 페이지 랭크 알고리즘이 있습니다.

// 그래프의 특징
// (1) 정점은 여러 개의 간선을 가질 수 있다.
// (2) 크게 방향 그래프와 무방향 그래프로 나눌 수 있다.(양방향 통행 도로, 일반통행)
// (3) 간선은 가중치를 가질 수 있다.
// (4) 사이클이 발생할 수 있다.

// 연결 상태에 따른 그래프 종류
// (1) 연결 그래프 : 모든 정점이 서로 이동 가능한 상태인 그래프
// (2) 비연결 그래프 : 특정 정점쌍 사이에 간선이 존재하지 않는 그래프
// (3) 완전 그래프 : 모든 정점끼리 연결된 상태인 그래프
// 완전 그래프인 경우 한 정점이 가지는 간선 수는 (모든 정점 수 - 1)이 되며, 모든 간선 수는 ((모든 정점 수 - 1) * 모든 정점 수)/2가 된다.

// 사이클 : 그래프의 정점과 간선의 부분집합에서 순환이 되는 부분

// 그래프의 구현 방법 : 인접 행렬, 인접 리스트 두 가지 방식으로 그래프를 표현할 수 있다.

// (1) 인접 행렬로 구현

const graph = Array.from(Array(5), () => Array(5).fill(false));
graph[0][1] = true; // 0 -> 1
graph[0][3] = true; // 0 -> 3
graph[1][2] = true; // 1 -> 2
graph[2][0] = true; // 2 -> 0
graph[2][4] = true; // 2 -> 4
graph[3][2] = true; // 3 -> 2
graph[4][0] = true; // 4 -> 0

// 인접 리스트로 구현
const graph2 = Array.from(Array(5), () => []);
graph2[0].push(1); // 0 -> 1
graph2[0].push(3); // 0 -> 3
graph2[1].push(2); // 1 -> 2
graph2[2].push(0); // 2 -> 0
graph2[2].push(4); // 2 -> 4
graph2[3].push(2); // 3 -> 2
graph2[4].push(0); // 4 -> 0
